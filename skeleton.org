* train.py
** NLI_Train
*** initialize_model()
**** Read in hyperparameters
*** initialize_vocab()
**** Read in vocab
*** main()
**** Load dataset (as indices)
**** Create Premise and Hypothesis objects using dimensions 
**** Create NLI_System, which hooks up Premise and Hypothesis
***** Pass in embeddings
**** Use dataset (as indices) to train system 
**** Use validation set (as indices) to train hyperparameters
**** Test and check accuracy

* nli_model.py
** Premise
*** process()
**** return tensor of encoded premise
** Hypothesis
*** process()
**** return tensor of encoded hypothesis
** NLI_System
*** __init__
**** setup_placeholders()
**** setup_embeddings()
***** Create placeholder for embeddings
**** setup_system()
***** link premise, hypothesis, etc. into real model
**** setup_loss()
***** calculate loss and create variable for that
*** Training
**** optimize()
***** run session one step with one pair of (x,y) data
**** train()
***** create optimizer for loss
***** run optimize in a loop over test data
*** Validation
**** test()
***** calculate cost for one pair of (x,y) data. Used for tuning hyperparameters
**** validate()
***** take validation dataset and use test() to calculate total validation cost
*** Testing
**** predict()
***** predict class (using premise + hypothesis)
**** evaluate_prediction()
***** Calculate test peformance given dataset, labels, session using a given number of samples
***** call predict() for each sample
